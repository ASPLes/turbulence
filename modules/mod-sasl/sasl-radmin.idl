/* -*- csharp -*-
 * @brief Remote SASL administration API for mod-sasl.
 */ 
xml-rpc interface sasl-radmin {
	/**
	 * @brief List of allowed resources.
	 */
	allowed resources "sasl-radmin";

	/**
	 * @brief Structure used to represent a user installed on the
	 * database.
	 */
	struct SaslUser {
		/**
		 * @brief The user installed in the database
		 * (according to the kind of request).
		 */
		string auth_id;
		/**
		 * @brief If the user is disabled (no login can be
		 * done with this user).
		 */
		bool   disabled;
	}

	/**
	 * @brief Array of users.
	 */
	array SaslUserArray of SaslUser;

	/** 
	 * @brief Allows to get the set of users created on current
	 * channel created. The channel created defines the serverName
	 * associated which configures the user domain.
	 * 
	 * 
	 * @return A list of users associated to the domain requested
	 * (serverName).
	 */
	[resource="sasl-radmin"];
	SaslUserArray get_users () {
		axlList          * list;
		SaslUserArray    * users;
		SaslUser         * user;
		
		/* get the serverName */
		const char       * serverName = SERVER_NAME_FROM_CHANNEL(channel);
		
		/* get the user list associated to the current serverName */
		list     = common_sasl_get_users (sasl_backend, serverName, &sasl_xml_db_mutex);
		users    = sasl_radmin_sasluserarray_new (axl_list_length (list));
		while (axl_list_length (list) > 0) {
			/* get a user */
			user = axl_list_get_first (list);
			
			/* store in the array */
			sasl_radmin_sasluserarray_add (users, user);
			
			/* unlink from the list */
			axl_list_unlink_first (list);
			
		} /* end list */
		axl_list_free (list);
		
		/* not implemented yet */
		return users;
	} options {
		include on body "get-users-include.c";
	}

	/** 
	 * @brief Allows to perform several operations on a particular
	 * sasl user.
	 *
	 * Operations supported:
	 *
	 * 1: Create a new SASL user.  The additional_value will be
	 * used as password. The remote_admin and disabled values will
	 * also be used.
	 *
	 * 2: Remove the sasl user provided.
	 *
	 * 3: Update the password of the provided sasl user.  The
	 * additional_value will be used as password.
	 *
	 * 4: Edit the sasl user id.  The additional_value will be
	 * used as the new sasl user_id. In this operation the
	 * remote_admin and the disabled value will also be used to
	 * update the user profile.
	 *
	 * 5: Make the user provided to have remote administration
	 *    access.
	 *
	 * 6: Ask if the provided user has remote administration
	 * support. This operation uses the auth_id parameter and
	 * returns true/false according to the remote admin status.
	 *   
	 * 
	 * @param auth_id The sasl auth id to be used.
	 *
	 * @param additional_value The additional value to be
	 * associated to the operation. Maybe editing the sasl auth id
	 * or the password.
	 *
	 * @param operation The kind of operation to perform.
	 * 
	 * @return true if the operation was completed, otherwise
	 * false is returned.
	 */
	[resource="sasl-radmin"];
	bool operate_sasl_user (string auth_id,
				string additional_value,
				bool   remote_admin,
				bool   disabled,
				int    operation) {
		/* get the serverName from the current channel */
		const char * serverName = SERVER_NAME_FROM_CHANNEL(channel);
		
		switch (operation) {
		case 1:
			/* add create a new sasl user */
			return common_sasl_user_add (sasl_backend, 
						     /* sasl user */
						     auth_id,
						     /* sasl password */
						     additional_value,
						     /* no server name */
						     serverName,
						     /* mutex */
						     &sasl_xml_db_mutex);
		case 2:
			/* remove a paritcular sasl user */
			return common_sasl_user_remove (sasl_backend, 
							/* sasl user */
							auth_id,
							/* no server name */
							serverName,
							/* mutex */
							&sasl_xml_db_mutex);
			
		case 3:
			/* change user password */
			/* not implemented */
			break;
		case 4:
			/* edit user auth id */
			/* not implemented */
			break;
		case 5:
			/* make the user provided to have remote
			 * administration support */
			/* not implemented */
		case 6:
			/* check if the provided user is
			 * administrator */
		default:
			/* operation not implemented */
			return false;
		} /* end switch */
	
		/* operation not implemented */
		return false;
		
	} options {

		include on body "operate-sasl-user.c";

	} /* end operate_sasl_user */
			       
	
} /* end sasl-radmin */
