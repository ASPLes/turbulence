<?xml version='1.0' ?><!-- great emacs, please load -*- nxml -*- mode -->
<!-- turbulence default configuration -->
<turbulence>

  <global-settings>
    <!-- port allocation configuration -->
    <ports>
      <port>601</port> <!-- syslog over beep port -->
      <port>602</port> <!-- xml-rpc over beep port -->
      <port>604</port> <!-- TUNNEL over beep port -->
      <port>3206</port>
      <port>44010</port>
    </ports>

    <!-- listener configuration (address to listen) -->
    <listener>
      <name>0.0.0.0</name>
    </listener>
    
    <!-- log reporting configuration -->
    <log-reporting enabled="yes" use-syslog="yes">
      <general-log file="/var/log/turbulence/main.log" />
      <error-log  file="/var/log/turbulence/error.log" />
      <access-log file="/var/log/turbulence/access.log" />
      <vortex-log file="/var/log/turbulence/vortex.log" />
    </log-reporting>

    <!-- building profiles support -->
    <tls-support enabled="yes" />

    <!-- crash settings 
       [*] hold:   lock the current instance so a developer can attach to the
                   process  to debug what's happening.

       [*] ignore: just ignore the signal, and try to keep running.

       [*] quit,exit: terminates turbulence execution.

       [*] backtrace: allows to produce a backtrace located on a
       file. 

       All these values can be combined with mail-to to send a report.
     -->
    <on-bad-signal action="hold" mail-to="default"/>

    <connections>
      <!-- Max allowed connections to handle at the same time. Getting
	   higher than 1024 will require especial permission. 

           Keep in mind that turbulence and vortex itself requires at
           least 12 descriptors for its proper function.  -->
      <max-connections hard-limit="512" soft-limit="512"/>
    </connections>

    <!-- in the case turbulence create child process to manage incoming connections, 
	 what to do with child process in turbulence main process exits. By default killing childs
	 will cause clean turbulence stop. However killing childs will cause running 
	 connections (handled by childs) to be closed. -->
    <kill-childs-on-exit value="yes" />

    <!-- general smtp servers and accounts that will be used to
         produce notifications. The account declaration <smtp-server>
         with is-default="yes" will be used as default system
         notification. -->
    <notify-failures>
      <smtp-server id="default" server="localhost" port="25" mail-from="turbulence@example.com" mail-to="test@example.com" is-default="yes"/>
    </notify-failures>

    <!-- allows to start turbulence without having profiles
         registered. It is recommend to set it to no because some
         profiles may be registered when activated profile path which
         is only done once the connection is received. -->
    <allow-start-without-profiles value="no" />

    <!-- Self explanatory: this control max child limit that can
         create the master turbulence process. This value applies to
         all profile path's children, considering the sum together -->
    <global-child-limit value="100" />

    <!-- Default TCP backlog (listen() call) to be configured for
         vortex context used by this turbulence -->
    <server-backlog value="50" />

    <!-- Max incoming frame size limit for channels having complete
         flag enabled (see vortex function
         vortex_channel_set_complete_flag).  Value is experesed in bytes -->
    <max-incoming-complete-frame-limit value="32768" />

    <!-- Allows to configure how will behave thread pool associated to
         the vortex context used by turbulence. See
         vortex_thread_pool_setup for more info. 

	 Max limit value allows to control upper limit for the thread
	 pool when load peaks.
	 
	 Step period, allows to control what's the reference period to
	 use when load peaks, adding more threads as configured by
	 step-add.
	 
	 Once the peak lows, threads added to the pool are removed
	 until the base number is reached (which is usually 5).
    -->
    <thread-pool max-limit="40" step-period="5" step-add="1" />

  </global-settings>

  <modules>
    
    <!-- directory where to find modules to load -->
    <directory src="/etc/turbulence/mods-enabled" /> 
    <!-- alternative directory -->
    <!-- <directory src="../mods-enabled" />  -->
    <no-load>
      <!-- signal modules to be not loaded even being available the
           directories configured. The name configured can be the name
           that is reporting the module or the module file name, like
           mod_skipped (don't add .so). The difference is that
           providing the file name will module from the loaded into
           memory while providing a name will cause the module to be
           loaded and then checked its name. -->
      <module name="mod-skipped" />
    </no-load>
  </modules>

  <!-- features to be requested and advised -->
  <features> 
    <!-- activates the x-client-close feature: improves server
         performance in high load -->
    <request-x-client-close value='yes' />
  </features>

  
  <!-- profile path configuration: the following is used to configure
       how profiles registered by modules are mixed to achieve the
       expected security policy and protocol orchestration -->
  <profile-path-configuration>

    <!-- load profile paths from this directory -->
    <include dir="/etc/turbulence/profile.d/" />

    <!-- profile path for all connections coming from localhost -->
    <path-def server-name=".*" src="127.*" path-name="localhost">
      
      <if-success profile="http://iana.org/beep/SASL/.*" connmark="sasl:is:authenticated" >
	<allow profile="urn:aspl.es:beep:profiles:radmin-ctl" preconnmark="sasl:is:authenticated" />
	<allow profile="http://turbulence.ws/profiles/test1" preconnmark="sasl:is:authenticated"/>
	<if-success profile="http://iana.org/beep/TLS" >
	  <allow profile="http://iana.org/beep/xmlrpc" max-per-conn="1" />
	  <allow profile="http://fact.aspl.es/profiles/coyote_profile" />
	</if-success>
      </if-success>
    </path-def>

    
    <!-- profile path for all connections coming from the local area network -->
    <path-def server-name=".*" src="192.168.0.*" path-name="local-parts">
      
      <if-success profile="http://iana.org/beep/SASL/*" connmark="sasl:is:authenticated">
	<if-success profile="http://iana.org/beep/TLS" >
	  <allow profile="http://iana.org/beep/xmlrpc" />
	  <allow profile="http://fact.aspl.es/profiles/coyote_profile" />
	</if-success>
      </if-success>
    </path-def>
    
    <!-- profile path for all connections coming from the outside, maybe the wan -->
    <path-def server-name=".*" src="not 192.168.0.*" path-name="not local-parts" run-as-user="www-data" run-as-group="www-data" separate="yes" chroot="/tmp">
      <if-success profile="http://iana.org/beep/SASL/*" connmark="sasl:is:authenticated">
	<allow profile="http://iana.org/beep/TUNNEL" />
      </if-success>
    </path-def>
    
  </profile-path-configuration>
  
</turbulence>
