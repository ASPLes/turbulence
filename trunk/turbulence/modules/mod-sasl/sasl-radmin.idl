/* -*- csharp -*-
 *  Copyright (C) 2008 Advanced Software Production Line, S.L.
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public License
 *  as published by the Free Software Foundation; version 2.1 of the
 *  License.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this program; if not, write to the Free
 *  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 *  02111-1307 USA
 *  
 *  You may find a copy of the license under this software is released
 *  at COPYING file. This is LGPL software: you are wellcome to
 *  develop propietary applications using this library withtout any
 *  royalty or fee but returning back any change, improvement or
 *  addition in the form of source code, project image, documentation
 *  patches, etc.
 *
 *  For comercial support on build BEEP enabled solutions, supporting
 *  turbulence based solutions, etc, contact us:
 *          
 *      Postal address:
 *         Advanced Software Production Line, S.L.
 *         C/ Antonio Suarez NÂº10, Edificio Alius A, Despacho 102
 *         Alcala de Henares, 28802 (MADRID)
 *         Spain
 *
 *      Email address:
 *         info@aspl.es - http://www.aspl.es/turbulence
 */ 
xml-rpc interface sasl-radmin {
	/**
	 * @brief List of allowed resources.
	 */
	allowed resources "sasl-radmin";

	/**
	 * @brief Structure used to represent a user installed on the
	 * database.
	 */
	struct SaslUser {
		/**
		 * @brief The user installed in the database
		 * (according to the kind of request).
		 */
		string auth_id;
		/**
		 * @brief If the user is disabled (no login can be
		 * done with this user).
		 */
		bool   disabled;
	}

	/**
	 * @brief Array of users.
	 */
	array SaslUserArray of SaslUser;

	/** 
	 * @brief Allows to get the set of users created on current
	 * channel created. The channel created defines the serverName
	 * associated which configures the user domain.
	 * 
	 * 
	 * @return A list of users associated to the domain requested
	 * (serverName).
	 */
	[resource="sasl-radmin"];
	SaslUserArray get_users () {
		axlList          * list;
		SaslUserArray    * users;
		SaslUser         * user;
		
		/* get the serverName */
		const char       * serverName = SERVER_NAME_FROM_CHANNEL(channel);
		
		/* get the user list associated to the current serverName */
		list     = common_sasl_get_users (sasl_backend, serverName, &sasl_xml_db_mutex);
		users    = sasl_radmin_sasluserarray_new (axl_list_length (list));
		while (axl_list_length (list) > 0) {
			/* get a user */
			user = axl_list_get_first (list);
			
			/* store in the array */
			sasl_radmin_sasluserarray_add (users, user);
			
			/* unlink from the list */
			axl_list_unlink_first (list);
			
		} /* end list */
		axl_list_free (list);
		
		/* not implemented yet */
		return users;
	} options {
		include on body "get-users-include.c";
	}

	/** 
	 * @brief Allows to perform several operations on a particular
	 * sasl user.
	 *
	 * Operations supported:
	 *
	 * 1: Create a new SASL user.  The additional_value will be
	 * used as password. The remote_admin and disabled values will
	 * also be used.
	 *
	 * 2: Remove the sasl user provided.
	 *
	 * 3: Update the password of the provided sasl user.  The
	 * additional_value will be used as password.
	 *
	 * 4: Edit the sasl user id.  The additional_value will be
	 * used as the new sasl user_id. In this operation the
	 * remote_admin and the disabled value will also be used to
	 * update the user profile.
	 *
	 * 5: Make the user provided to have remote administration
	 *    access.
	 *
	 * 6: Ask if the provided user has remote administration
	 * support. This operation uses the auth_id parameter and
	 * returns true/false according to the remote admin status.
	 *   
	 * 7: Call to disable the provided SASL user, according to the
	 * value provided at the "disabled" parameter. The rest of
	 * parameters are ignored.
	 *
	 * @param auth_id The sasl auth id to be used.
	 *
	 * @param additional_value The additional value to be
	 * associated to the operation. Maybe editing the sasl auth id
	 * or the password.
	 *
	 * @param operation The kind of operation to perform.
	 * 
	 * @return true if the operation was completed, otherwise
	 * false is returned.
	 */
	[resource="sasl-radmin"];
	bool operate_sasl_user (string auth_id,
				string additional_value,
				bool   remote_admin,
				bool   disabled,
				int    operation) {
		/* get the serverName from the current channel */
		const       char * serverName = SERVER_NAME_FROM_CHANNEL(channel);
		/* get the context */
		TurbulenceCtx    * ctx        = common_sasl_get_context (sasl_backend);

		switch (operation) {
		case 1:
			
			msg ("Received accepted request to create user: %s, remote_admin=%d, disabled=%d",
			     auth_id, remote_admin, disabled);

			/* before continue, check if the user already exists */
			if (common_sasl_user_exists (sasl_backend, auth_id, serverName, NULL, &sasl_xml_db_mutex)) {
				REPLY_FAULT ("Unable to create user, auth_id is already in use (user already exists!", -1, false);
			}

			/* add create a new sasl user */
			if (! common_sasl_user_add (sasl_backend, 
						    /* sasl user */
						    auth_id,
						    /* sasl password */
						    additional_value,
						    /* no server name */
						    serverName,
						    /* mutex */
						    &sasl_xml_db_mutex)) {
				error ("failed to create the user %s", auth_id);
				return false;
			} /* end if */

			/* now configure additional values */
			if (! common_sasl_user_disable (sasl_backend,
							auth_id, serverName, disabled, &sasl_xml_db_mutex)) {
				error ("failed to set disabled state to user, unable to create the user");

				/* failed to disabled the operation, remote the user */
				common_sasl_user_remove (sasl_backend, auth_id, serverName, &sasl_xml_db_mutex);
				return false;
			} /* end if */

			/* now configure remote administration support */
			if (! common_sasl_enable_remote_admin (sasl_backend,
							       auth_id, serverName, remote_admin, &sasl_xml_db_mutex)) {
				error ("failed to configured remote administration support provided=%d, unable to create the user",
				       remote_admin);

				/* failed to disabled the operation, remote the user */
				common_sasl_user_remove (sasl_backend, auth_id, serverName, &sasl_xml_db_mutex);
				return false;
			} /* end if */

			return true;

		case 2:
			msg ("Received accepted request to remove user: %s", auth_id);

			/* remove from the remote admins */
			common_sasl_enable_remote_admin (sasl_backend, auth_id, serverName,
							 false, &sasl_xml_db_mutex);

			/* remove a paritcular sasl user */
			common_sasl_user_remove (sasl_backend, 
						 /* sasl user */
						 auth_id,
						 /* no server name */
						 serverName,
						 /* mutex */
						 &sasl_xml_db_mutex);

			/* return true */
			return true;
		case 3:
			/* change user password */
			return common_sasl_user_password_change (sasl_backend, auth_id, additional_value, serverName, &sasl_xml_db_mutex);
		case 4:
			/* edit user auth id */
			if (! common_sasl_user_edit_auth_id (sasl_backend, auth_id, additional_value,
							     serverName, &sasl_xml_db_mutex)) {
				/* failed to change the user id */
				return false;
			} /* end if */

			/* now set the rest of values */
			if (! common_sasl_user_disable (sasl_backend, additional_value, serverName, disabled, &sasl_xml_db_mutex)) {
				error ("failed to enable/disable sasl user for %s", auth_id);
				return false;
			}

			/* update remote admin flag */
			msg ("configuring remote admininistration for auth_id %s, status: %d", additional_value, remote_admin);
			if (! common_sasl_enable_remote_admin (sasl_backend, additional_value, serverName, remote_admin, &sasl_xml_db_mutex)) {
				error ("failed to enable/disable remote administration for sasl user %s", auth_id);
				return false;
			}

			/* user edited properly */
			return true;
		case 5:
			/* make the user provided to have remote
			 * administration support */
			/* update remote admin flag */
			return common_sasl_enable_remote_admin (sasl_backend, auth_id, serverName, true, &sasl_xml_db_mutex);
		case 6:
			msg ("received request to check if remote admin is enabled for auth_id=%s and serverName=%s",
			     auth_id, serverName ? serverName : "");
			/* check if the provided user is
			 * administrator */
			return common_sasl_is_remote_admin_enabled (sasl_backend, auth_id, serverName, &sasl_xml_db_mutex);
		case 7:
			/* now configure additional values */
			if (! common_sasl_user_disable (sasl_backend,
							auth_id, serverName, disabled, &sasl_xml_db_mutex)) {
				error ("failed to set disabled state to user, unable to create the user");

				/* failed to disabled the operation, remote the user */
				common_sasl_user_remove (sasl_backend, auth_id, serverName, &sasl_xml_db_mutex);
				return false;
			} /* end if */
			
			return true;
		default:
			/* operation not implemented */
			return false;
		} /* end switch */
	
		/* operation not implemented */
		return false;
	} options {

		include on body "operate-sasl-user.c";

	} /* end operate_sasl_user */
			       
	
} /* end sasl-radmin */
